@page "/play"
@using System.Linq
@using Microsoft.AspNetCore.SignalR.Client
@using Fishbowl.Net.Shared.SignalR
@using Fishbowl.Net.Shared.Data
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@implements IClient

<h1>Play</h1>

<button type="button" @onclick="SetPlayerAsync">Submit player</button>

@code
{
    private HubConnection connection = default!;

    private Player? player;

    private Player Player => this.player ?? throw new InvalidOperationException();

    private TeamViewModel? team;

    private TeamViewModel Team => this.team ?? throw new InvalidOperationException();

    private IEnumerable<TeamViewModel>? teams;

    protected override Task OnInitializedAsync()
    {
        this.connection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/game"))
            .Build();

        this.connection.On("DefineTeamCount", this.DefineTeamCount);
        this.connection.On("DefineRoundTypes", this.DefineRoundTypes);
        this.connection.On<IEnumerable<TeamViewModel>>("ReceiveTeams", this.ReceiveTeams);
        this.connection.On<string>("ReceiveRound", this.ReceiveRound);
        this.connection.On<Player>("ReceivePeriod", this.ReceivePeriod);
        this.connection.On<Word>("ReceiveWord", this.ReceiveWord);
        this.connection.On<Score>("ReceiveScore", this.ReceiveScore);
        this.connection.On<Dictionary<int, int>>("ReceiveGame", this.ReceiveGame);

        return this.connection.StartAsync();
    }

    public Task DefineTeamCount()
    {
        Console.WriteLine("DefineTeamCount");
        return this.connection.SendAsync("SetTeamCountAsync", 2);
    }
    
    public Task DefineRoundTypes()
    {
        Console.WriteLine("DefineRoundTypes");
        return this.connection.SendAsync("SetRoundTypes", new[] { "Round1", "Round2" });
    }

    public Task ReceiveTeams(IEnumerable<TeamViewModel> teams)
    {
        this.teams = teams;
        this.team = teams.First(team => team.PlayerIds.Any(id => id == this.Player.Id));

        Console.WriteLine($"My team id: {this.Team.Id}");

        return Task.CompletedTask;
    }

    public Task ReceiveRound(string roundType)
    {
        Console.WriteLine($"Round: {roundType}");
        return Task.CompletedTask;
    }

    public async Task ReceivePeriod(Player player)
    {
        Console.WriteLine($"Period player: {player.Name}");

        if (player.Id == this.Player.Id)
        {
            Console.WriteLine("Wait two seconds, than start period");
            await Task.Delay(2000);

            await this.SetInput();
        }
    }

    public async Task ReceiveWord(Word word)
    {
        Console.WriteLine($"Word: {word.Value}");
        await Task.Delay(10000);
        Console.WriteLine($"Send [{word.Value}] at {DateTimeOffset.UtcNow}");
        await this.SetInput(word);
    }

    public Task ReceiveScore(Score score)
    {
        Console.WriteLine($"Score received: [{score.Word.Value}, {score.Timestamp}]");
        return Task.CompletedTask;
    }

    public Task ReceiveGame(Dictionary<int, int> scores)
    {
        foreach (var teamScore in scores)
        {
            Console.WriteLine($"Team {teamScore.Key} scores: {teamScore.Value}");
        }

        return Task.CompletedTask;
    }


    private Task SetInput(Word? word = null) => this.connection.SendAsync("SetInput", DateTimeOffset.UtcNow, word);


    public ValueTask DisposeAsync() => this.connection.DisposeAsync();
    
    private Task SubmitTeamCount()
    {
        return this.connection.SendAsync("SetTeamCountAsync", 2);
    }

    private Task SubmitRoundTypes()
    {
        return this.connection.SendAsync("SetRoundTypes", new[] { "GameType1", "GameType2" });
    }

    private async Task SetPlayerAsync()
    {
        var random = new Random();

        this.player = new Player(
            Guid.NewGuid(),
            $"Player{random.Next()}",
            new[]
            { 
                new Word(Guid.NewGuid(), $"Word{random.Next()}"),
                new Word(Guid.NewGuid(), $"Word{random.Next()}")
            });

        await this.connection.InvokeAsync("SetPlayerAsync", this.Player);

        Console.WriteLine($"{this.player.Name} set");
    }
}