@page "/play"
@using System.Linq
@using Microsoft.AspNetCore.SignalR.Client
@using Fishbowl.Net.Client.Services;
@using Fishbowl.Net.Shared.Data
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@implements IGameClient

<h1>Play</h1>

<button type="button" @onclick="SetPlayerAsync">Submit player</button>

@code
{
    private HubConnection connection = default!;

    private Player? player;

    private Player Player => this.player ?? throw new InvalidOperationException();

    private Team? team;

    private Team Team => this.team ?? throw new InvalidOperationException();

    private Game? game;

    public Game Game
    {
        get => this.game ?? throw new InvalidOperationException();
        set => this.game = value;
    }

    private DateTimeOffset? now;

    private DateTimeOffset Now
    {
        get
        {
            if (this.now is null)
            {
                this.now = DateTimeOffset.UtcNow;
                return this.now.Value;
            }

            this.now = this.now.Value + TimeSpan.FromSeconds(10);
            return this.now.Value;
        }
    }

    protected override Task OnInitializedAsync()
    {
        this.connection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/game"))
            .Build();

        this.connection.On("DefineTeamCount", this.DefineTeamCount);
        this.connection.On("DefineRoundTypes", this.DefineRoundTypes);
        this.connection.On<Game>("ReceiveGameStarted", this.ReceiveGameStarted);
        this.connection.On<Game>("ReceiveGameFinished", this.ReceiveGameFinished);
        this.connection.On<Round>("ReceiveRoundStarted", this.ReceiveRoundStarted);
        this.connection.On<Round>("ReceiveRoundFinished", this.ReceiveRoundFinished);
        this.connection.On<Period>("ReceivePeriodSetup", this.ReceivePeriodSetup);
        this.connection.On<Period>("ReceivePeriodStarted", this.ReceivePeriodStarted);
        this.connection.On<Period>("ReceivePeriodFinished", this.ReceivePeriodFinished);
        this.connection.On<Word>("ReceiveWordSetup", this.ReceiveWordSetup);
        this.connection.On<Score>("ReceiveScoreAdded", this.ReceiveScoreAdded);

        return this.connection.StartAsync();
    }

    public Task DefineTeamCount()
    {
        Console.WriteLine("DefineTeamCount");
        return this.connection.SendAsync("SetTeamCount", 2);
    }
    
    public Task DefineRoundTypes()
    {
        Console.WriteLine("DefineRoundTypes");
        return this.connection.SendAsync("SetRoundTypes", new[] { "Round1", "Round2" });
    }

    public Task ReceiveGameStarted(Game game)
    {
        this.Game = game;
        this.team = this.Game.Teams.First(
            team => team.Players.Any(player => player.Id == this.Player.Id));

        Console.WriteLine($"My team id: {this.Team.Id}");

        return Task.CompletedTask;
    }

    public Task ReceiveGameFinished(Game game)
    {
        this.Game = game;

        foreach (var teamScore in this.Game.GetTeamScores())
        {
            Console.WriteLine($"Team {teamScore.Key} scores: {teamScore.Value}");
        }

        return Task.CompletedTask;
    }

    public Task ReceiveRoundStarted(Round round)
    {
        Console.WriteLine($"Round started: {round.Type}");
        return Task.CompletedTask;
    }

    public Task ReceiveRoundFinished(Round round)
    {
        Console.WriteLine($"Round finished: {round.Type}");
        return Task.CompletedTask;
    }

    public async Task ReceivePeriodSetup(Period period)
    {
        Console.WriteLine($"Period player: {period.Player.Name}");

        if (period.Player.Id == this.Player.Id)
        {
            Console.WriteLine("Starting period as player");
            await this.StartPeriod();
        }
    }

    public Task ReceivePeriodStarted(Period period)
    {
        Console.WriteLine("Period started at: " + period);
        return Task.CompletedTask;
    }

    public Task ReceivePeriodFinished(Period period)
    {
        Console.WriteLine($"Period finished at: {period.FinishedAt}; scores ({period.Player.Name}): {period.Scores.Count}");
        return Task.CompletedTask;
    }

    public async Task ReceiveWordSetup(Word word)
    {
        Console.WriteLine($"Word: {word.Value}");
        var timestamp = this.Now;
        await this.AddScore(word, timestamp);
        await this.NextWord(timestamp);
    }

    public Task ReceiveScoreAdded(Score score)
    {
        Console.WriteLine($"Score received: [{score.Word.Value}, {score.Timestamp}]");
        return Task.CompletedTask;
    }


    private Task StartPeriod() => this.connection.SendAsync("StartPeriod", this.Now);

    private Task NextWord(DateTimeOffset timestamp) => this.connection.SendAsync("NextWord", timestamp);

    private Task AddScore(Word word, DateTimeOffset timestamp) => this.connection.SendAsync("AddScore", new Score(word, timestamp));

    private Task FinishPeriod() => this.connection.SendAsync("FinishPeriod", this.Now);

    public ValueTask DisposeAsync() => this.connection.DisposeAsync();
    
    private Task SubmitTeamCount()
    {
        return this.connection.SendAsync("SetTeamCount", 2);
    }

    private Task SubmitRoundTypes()
    {
        return this.connection.SendAsync("SetRoundTypes", new[] { "GameType1", "GameType2" });
    }

    private async Task SetPlayerAsync()
    {
        var random = new Random();

        this.player = new Player(
            Guid.NewGuid(),
            $"Player{random.Next()}",
            new[]
            { 
                new Word(Guid.NewGuid(), $"Word{random.Next()}"),
                new Word(Guid.NewGuid(), $"Word{random.Next()}")
            });

        await this.connection.InvokeAsync("AddPlayer", this.Player);

        Console.WriteLine($"{this.player.Name} set");
    }
}