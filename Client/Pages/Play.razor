@page "/play"
@using System.Linq
@using Fishbowl.Net.Client.Components
@using Fishbowl.Net.Client.Components.Views
@using Microsoft.AspNetCore.SignalR.Client
@using Fishbowl.Net.Client.Services;
@using Fishbowl.Net.Shared.Data
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@implements IGameClient

<h1>Play</h1>

<StateManager @ref="this.stateManager">
    <State StateType="GameState.Connecting">
        <Connecting />
    </State>
    <State StateType="GameState.WaitingForTeamCount">
        <TeamCount OnTeamCountSet="@this.SubmitTeamCount" />
    </State>
    <State StateType="GameState.WaitingForRoundTypes">
        <RoundTypes OnRoundTypesSet="@this.SubmitRoundTypes" />
    </State>
    <State StateType="GameState.WaitingForPlayer">
        <PlayerData OnPlayerDataSet="@this.SubmitPlayerData" />
    </State>
    <State StateType="GameState.WaitingForPlayers">
        <WaitingForPlayers />
    </State>
    <State StateType="GameState.GameStarted" Delay="@TimeSpan.FromSeconds(500)">
        <GameStarted Team="@this.Team" />
    </State>
    <State StateType="GameState.RoundStarted" Delay="@TimeSpan.FromMilliseconds(500)">
        <RoundStarted Round="@this.Round" />
    </State>
    <State StateType="GameState.PeriodSetupPlay">
        <PeriodSetupPlay
            Round="@this.Round"
            OnStarted="@this.StartPeriod" />
    </State>
    <State StateType="GameState.PeriodSetupWatch">
        <PeriodSetupWatch
            Round="@this.Round"
            Period="@this.Period" />
    </State>
    <State StateType="GameState.PeriodPlay">
        <PeriodPlay
            Round="@this.Round"
            Period="@this.Period"
            Word="@this.Word"
            OnScoreAdded="@this.AddScore"
            OnPeriodFinished="@this.FinishPeriod" />
    </State>
    <State StateType="GameState.PeriodWatch">
        <PeriodWatch
            Round="@this.Round"
            Period="@this.Period" />
    </State>
    <State StateType="GameState.PeriodFinished" Delay="@TimeSpan.FromMilliseconds(500)">
        <PeriodFinished Period="@this.Period" />
    </State>
    <State StateType="GameState.RoundFinished" Delay="@TimeSpan.FromMilliseconds(500)">
        <RoundFinished Round="@this.Round" />
    </State>
    <State StateType="GameState.GameFinished">
        <GameFinished Game="@this.Game" />
    </State>
</StateManager>

@code
{
    private StateManager? stateManager;

    private StateManager StateManager => this.stateManager ?? throw new InvalidOperationException();

    private GameState state = GameState.Connecting;

    private GameState State
    { 
        get => this.state;
        set
        {
            this.state = value;
            this.StateHasChanged();
        }
    }
    
    private HubConnection connection = default!;

    private Player? player;

    private Player Player => this.player ?? throw new InvalidOperationException();

    private Team? team;

    private Team Team => this.team ?? throw new InvalidOperationException();

    private Game? game;

    private Round? Round { get; set; }

    private Period? Period { get; set; }

    private Word? Word { get; set; }

    public Game Game
    {
        get => this.game ?? throw new InvalidOperationException();
        set => this.game = value;
    }

    private DateTimeOffset? now;

    private DateTimeOffset Now
    {
        get
        {
            if (this.now is null)
            {
                this.now = DateTimeOffset.UtcNow;
                return this.now.Value;
            }

            this.now = this.now.Value + TimeSpan.FromSeconds(10);
            return this.now.Value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        this.connection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/game"))
            .Build();

        this.connection.On("DefineTeamCount", this.DefineTeamCount);
        this.connection.On("DefineRoundTypes", this.DefineRoundTypes);
        this.connection.On("DefinePlayer", this.DefinePlayer);
        this.connection.On("ReceiveWaitForPlayers", this.ReceiveWaitForPlayers);
        this.connection.On<Game>("ReceiveGameStarted", this.ReceiveGameStarted);
        this.connection.On<Game>("ReceiveGameFinished", this.ReceiveGameFinished);
        this.connection.On<Round>("ReceiveRoundStarted", this.ReceiveRoundStarted);
        this.connection.On<Round>("ReceiveRoundFinished", this.ReceiveRoundFinished);
        this.connection.On<Period>("ReceivePeriodSetup", this.ReceivePeriodSetup);
        this.connection.On<Period>("ReceivePeriodStarted", this.ReceivePeriodStarted);
        this.connection.On<Period>("ReceivePeriodFinished", this.ReceivePeriodFinished);
        this.connection.On<Word>("ReceiveWordSetup", this.ReceiveWordSetup);
        this.connection.On<Score>("ReceiveScoreAdded", this.ReceiveScoreAdded);

        await this.connection.StartAsync();
    }

    public async Task DefineTeamCount()
    {
        await this.StateManager.SetState(GameState.WaitingForTeamCount);
    }
    
    public Task DefineRoundTypes()
    {
        Console.WriteLine("DefineRoundTypes");
        return this.StateManager.SetState(GameState.WaitingForRoundTypes);
    }

    public Task DefinePlayer()
    {
        Console.WriteLine("DefinePlayer");
        return this.StateManager.SetState(GameState.WaitingForPlayer);
    }

    public Task ReceiveWaitForPlayers()
    {
        Console.WriteLine("ReceiveWaitForPlayers");
        return this.StateManager.SetState(GameState.WaitingForPlayers);
    }

    public Task ReceiveGameStarted(Game game)
    {
        this.Game = game;
        this.team = this.Game.Teams.First(
            team => team.Players.Any(player => player.Id == this.Player.Id));

        Console.WriteLine($"My team id: {this.Team.Id}");

        return this.StateManager.SetState(GameState.GameStarted);
    }

    public Task ReceiveGameFinished(Game game)
    {
        this.Game = game;

        foreach (var teamScore in this.Game.GetTeamScores())
        {
            Console.WriteLine($"Team {teamScore.Key} scores: {teamScore.Value}");
        }

        return this.StateManager.SetState(GameState.GameFinished);
    }

    public Task ReceiveRoundStarted(Round round)
    {
        Console.WriteLine($"Round started: {round.Type}");
        this.Round = round;

        return this.StateManager.SetState(GameState.RoundStarted);
    }

    public Task ReceiveRoundFinished(Round round)
    {
        Console.WriteLine($"Round finished: {round.Type}");
        this.Round = round;

        return this.StateManager.SetState(GameState.RoundFinished);
    }

    public Task ReceivePeriodSetup(Period period)
    {
        Console.WriteLine($"Period player: {period.Player.Name}");
        Console.WriteLine($"Period length: {period.Length()}");
        this.Period = period;

        if (period.Player == this.Player)
        {
            Console.WriteLine("Local player period");
            return this.StateManager.SetState(GameState.PeriodSetupPlay);
        }
        else
        {
            Console.WriteLine("Remote player period");
            return this.StateManager.SetState(GameState.PeriodSetupWatch);
        }
    }

    public Task ReceivePeriodStarted(Period period)
    {
        Console.WriteLine("Period started at: " + period);
        this.Period = period;
        return this.StateManager.SetState(
            period.Player == this.Player ? GameState.PeriodPlay : GameState.PeriodWatch);
    }

    public Task ReceivePeriodFinished(Period period)
    {
        Console.WriteLine($"Period finished at: {period.FinishedAt}; scores ({period.Player.Name}): {period.Scores.Count}");
        return this.StateManager.SetState(GameState.PeriodFinished);
    }

    public Task ReceiveWordSetup(Word word)
    {
        Console.WriteLine($"Word: {word.Value}");
        this.Word = word;
        this.StateHasChanged();
        return Task.CompletedTask;
    }

    public Task ReceiveScoreAdded(Score score)
    {
        Console.WriteLine($"Score received: [{score.Word.Value}, {score.Timestamp}]");
        return Task.CompletedTask;
    }


    private Task StartPeriod(DateTimeOffset timestamp) => this.connection.SendAsync("StartPeriod", timestamp);

    private Task NextWord(DateTimeOffset timestamp) => this.connection.SendAsync("NextWord", timestamp);

    private async Task AddScore(Score score)
    {
        await this.connection.SendAsync("AddScore", score);
        await this.NextWord(score.Timestamp);
    }

    private Task FinishPeriod(DateTimeOffset timestamp) => this.connection.SendAsync("FinishPeriod", timestamp);

    public ValueTask DisposeAsync() => this.connection.DisposeAsync();
    
    private Task SubmitTeamCount(int teamCount) => this.connection.SendAsync("SetTeamCount", teamCount);

    private Task SubmitRoundTypes(IEnumerable<string> roundTypes) =>
        this.connection.SendAsync("SetRoundTypes", roundTypes);

    private Task SubmitPlayerData(Player player)
    {
        this.player = player;
        return this.connection.SendAsync("AddPlayer", player);
    }

    private async Task SetPlayerAsync()
    {
        var random = new Random();

        this.player = new Player(
            Guid.NewGuid(),
            $"Player{random.Next()}",
            new[]
            { 
                new Word(Guid.NewGuid(), $"Word{random.Next()}"),
                new Word(Guid.NewGuid(), $"Word{random.Next()}")
            });

        await this.connection.InvokeAsync("AddPlayer", this.Player);

        Console.WriteLine($"{this.player.Name} set");
    }
}