@page "/play"
@using System.Linq
@using Microsoft.AspNetCore.SignalR.Client
@using Fishbowl.Net.Shared.SignalR
@using Fishbowl.Net.Shared.Data
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@implements IClient

<h1>Play</h1>

<button type="button" @onclick="SubmitTeamCount">TeamCount 2</button>
<button type="button" @onclick="SubmitRoundTypes">RoundTypes</button>
<button type="button" @onclick="SubmitPlayer">Submit player</button>

@code
{
    private HubConnection connection = default!;

    private Player? player;

    private Player Player => this.player ?? throw new InvalidOperationException();

    private Team? team;

    private Team Team => this.team ?? throw new InvalidOperationException();

    private IEnumerable<Team>? teams;

    protected override Task OnInitializedAsync()
    {
        this.connection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/game"))
            .Build();

        this.connection.On("DefineTeamCount", this.DefineTeamCount);
        this.connection.On("DefineRoundTypes", this.DefineRoundTypes);

        return this.connection.StartAsync();
    }

    public Task DefineTeamCount()
    {
        Console.WriteLine("DefineTeamCount");
        return this.connection.SendAsync("SetTeamCountAsync", 2);
    }
    
    public Task DefineRoundTypes()
    {
        Console.WriteLine("DefineRoundTypes");
        return this.connection.SendAsync("SetRoundTypes", new[] { "Round1", "Round2" });
    }

    public Task ReceiveTeams(IEnumerable<Team> teams)
    {
        this.teams = teams;
        this.team = teams.First(team => team.Players.Any(player => player.Id == this.Player.Id));

        Console.WriteLine($"My team id: {this.Team.Id}");

        return Task.CompletedTask;
    }

    public Task ReceiveRound(Round round)
    {
        Console.WriteLine($"Round: {round.Type}");
        return Task.CompletedTask;
    }

    public async Task ReceivePeriod(Period period)
    {
        Console.WriteLine($"Period player: {period.Player.Name}");

        if (period.Player.Id == this.Player.Id)
        {
            Console.WriteLine("Wait two seconds, than start period");
            await Task.Delay(2000);

            await this.SetInput();
        }
    }

    public async Task ReceiveWord(Word word)
    {
        Console.WriteLine($"Word: {word.Value}");
        await Task.Delay(10000);
        Console.WriteLine($"Send [{word.Value}] at {DateTimeOffset.UtcNow}");
        await this.SetInput(word);
    }

    public Task ReceiveScore(Score score)
    {
        Console.WriteLine($"Score received: [{score.Word.Value}, {score.Timestamp}]");
        return Task.CompletedTask;
    }

    public Task ReceiveGame(Game game)
    {
        var playerScores = game.Rounds
            .SelectMany(round => round.Periods)
            .GroupBy(period => period.Player.Id)
            .ToDictionary(item => item.Key, item => item.ToList());

        var teamScores = game.Teams
            .ToDictionary(
                team => team.Id,
                team => playerScores
                    .Where(score => team.Players
                        .Any(player => player.Id == score.Key))
                    .ToList());

        foreach (var teamScore in teamScores)
        {
            Console.WriteLine($"Team {teamScore.Key} scores: {teamScore.Value.Count}");
        }

        return Task.CompletedTask;
    }


    private Task SetInput(Word? word = null) => this.connection.SendAsync("SetInput", DateTimeOffset.UtcNow, word);


    public ValueTask DisposeAsync() => this.connection.DisposeAsync();
    
    private Task SubmitTeamCount()
    {
        return this.connection.SendAsync("SetTeamCountAsync", 2);
    }

    private Task SubmitRoundTypes()
    {
        return this.connection.SendAsync("SetRoundTypes", new[] { "GameType1", "GameType2" });
    }

    private async Task SubmitPlayer()
    {
        var random = new Random();
        var playerName = $"Player{random.Next()}";
        await this.connection.InvokeAsync("SetPlayerAsync",
            playerName,
            new[] { $"Word{random.Next()}", $"Word{random.Next()}" });

        Console.WriteLine($"{playerName} retuned");
    }
}