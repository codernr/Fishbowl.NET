@using Net.Shared.Data

<h2>Round: @this.Round.Type</h2>


<Timer Start="@this.StartedAt" Length="@this.Period.Length()" OnExpired="@(() => this.expired = true)" />

@if (this.Word is not null)
{
    <p>@this.Word!.Value</p>
    <div>
        <button type="button" @onclick="this.ScoreAdded">Guessed</button>
    </div>
}

@if (this.expired)
{
    <div>
        <button type="button" @onclick="@(e => this.OnPeriodFinished.InvokeAsync(DateTimeOffset.UtcNow))">Pass</button>
    </div>   
}


@code
{
    [Parameter]
    public Round Round { get; set; } = default!;

    [Parameter]
    public Period Period { get; set; } = default!;

    [Parameter]
    public Word? Word { get; set; }

    [Parameter]
    public EventCallback<Score> OnScoreAdded { get; set; } = default!;

    [Parameter]
    public EventCallback<DateTimeOffset> OnPeriodFinished { get; set; } = default!;

    private DateTimeOffset StartedAt => this.Period.StartedAt ?? throw new InvalidOperationException();

    private bool expired;

    private Task ScoreAdded(EventArgs e)
    {
        var score = new Score(this.Word!, DateTimeOffset.UtcNow);
        return this.OnScoreAdded.InvokeAsync(score);
    }
}