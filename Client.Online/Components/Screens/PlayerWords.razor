@using System.ComponentModel.DataAnnotations

@inherits Screen
@inject IState<GamePlayState> State

<ScreenContainer>
    <MudForm @ref="this.form" IsValidChanged="_ => this.StateHasChanged()">
        <MudContainer>
            <MudAlert Severity="Severity.Info">
                @(string.Format(
                    this.L["Components.States.Common.PlayerCount"],
                    this.State.Value.TotalPlayerCount,
                    this.State.Value.ConnectedPlayerCount,
                    this.State.Value.ReadyPlayerCount))
            </MudAlert>
        </MudContainer>
        
        @for (int i = 0; i < this.words.Length; i++)
        {
            var id = i;
            <MudContainer Class="my-6">
                <MudTextField
                    T="string"
                    Label="@(L[$"Components.States.Common.PlayerWords.Word.{id}"])"
                    Required="true"
                    RequiredError="@(L["Common.Error.Required"])"
                    Validation="@(new MinLengthAttribute(2)
                    {
                        ErrorMessage = L["Components.States.Common.PlayerWords.MinLengthError"]
                    })"
                    @bind-Value="this.words[id]"
                    Immediate="true" />
            </MudContainer>
        }
        <MudContainer>
            <MudButton
                Variant="Variant.Filled"
                Color="Color.Primary"
                FullWidth="true"
                Size="Size.Large"
                Disabled="!this.form!.IsValid"
                @onclick="this.Submit">
                @L["Components.States.PlayerWords.SubmitButton"]
            </MudButton>
        </MudContainer>
    </MudForm>
</ScreenContainer>